version: "3.3"
services:

  traefik:
    image: traefik:alpine
    command: --web --docker --docker.swarmmode --docker.watch --docker.domain=${DOMAIN:-localhost} --docker.exposedbydefault=false --logLevel=INFO
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/null:/traefik.toml
    networks:
      - public
      - internal
    deploy:
      mode: global
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  frontend:
    image: wacccourse/frontend:latest
    networks:
      - internal
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      endpoint_mode: dnsrr
      labels:
        - "traefik.enable=true"
        - "traefik.backend=frontend"
        - "traefik.port=80"
        - "traefik.frontend.rule=Host:${DOMAIN:-localhost}"

  backend:
    image: wacccourse/backend:latest
    networks:
      - internal
    environment:
      APPLICATION_SECRET: "some-fake-secret-to-change"
      MONGODB_URI: "mongodb://mongo-1:27017,mongo-2:27017,mongo-3:27017/wacc"
      CASSANDRA_URI: "cassandradb://cassandra-1:9042,cassandra-2:9042,cassandra-3:9042"
      DOCKER_HOST : "http://docker-socket-proxy:2375"
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      endpoint_mode: dnsrr
      labels:
        - "traefik.enable=true"
        - "traefik.backend=backend"
        - "traefik.port=9000"
        - "traefik.frontend.rule=Host:${DOMAIN:-localhost};PathPrefixStrip:/api"

  docker-socket-proxy:
    image: wacccourse/docker-socket-proxy:latest
    networks:
      - internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: global
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  mongo-1:
    image: mongo:3.4
    networks:
      - internal
    volumes:
      - mongo_data:/data/db
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.node == node1
      restart_policy:
        condition: on-failure
    command: 'mongod --replSet "rs0"'

  mongo-2:
    image: mongo:3.4
    networks:
      - internal
    volumes:
      - mongo_data:/data/db
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.node == node2
      restart_policy:
        condition: on-failure
    command: 'mongod --replSet "rs0"'

  mongo-3:
    image: mongo:3.4
    networks:
      - internal
    volumes:
      - mongo_data:/data/db
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.node == node3
      restart_policy:
        condition: on-failure
    command: 'mongod --replSet "rs0"'

  mongo-setup:
    image: wacccourse/mongo-setup:latest
    networks:
      - internal
    environment:
      MONGO_NAMES: "mongo-1 mongo-2 mongo-3"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  cassandra-1:
    image: cassandra:3.11
    networks:
      - internal
    volumes:
      - cassandra_data:/cassandra/data/db
    environment:
      CASSANDRA_BROADCAST_ADDRESS: cassandra-1
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.node == node1
      restart_policy:
        condition: on-failure

  cassandra-2:
    image: cassandra:3.11
    networks:
      - internal
    volumes:
      - cassandra_data:/cassandra/data/db
    environment:
      CASSANDRA_BROADCAST_ADDRESS: cassandra-2
      CASSANDRA_SEEDS: cassandra-1
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.node == node2
      restart_policy:
        condition: on-failure

  cassandra-3:
    image: cassandra:3.11
    networks:
      - internal
    volumes:
      - cassandra_data:/cassandra/data/db
    environment:
      CASSANDRA_BROADCAST_ADDRESS: cassandra-3
      CASSANDRA_SEEDS: cassandra-1
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.node == node3
      restart_policy:
        condition: on-failure

  # TODO: kakfa

networks:
  public:
    driver: overlay
  internal:
    driver: overlay
    internal: true

volumes:
  mongo_data: {}
  cassandra_data: {}
