# please this command before deploying this stack:
# docker network create consul-net -d overlay --internal --subnet=172.20.0.0/24

version: "3.3"
services:

  consul:
    image: sdelrio/consul:latest
    labels: [app=consul]
    ports:
      - "8500:8500"
    networks:
      - consul-net
      - internal
    environment:
      - 'CONSUL_LOCAL_CONFIG={"skip_leave_on_interrupt": true}'
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL=consul
      - CONSUL_CHECK_LEADER=true
    deploy:
      replicas: 3
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: continue

  registrator:
    image: gliderlabs/registrator:latest
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    networks:
      - consul-net
    command: ["-internal", "consul://consul:8500"]

  traefik:
    image: traefik:alpine
    command: --web --docker --docker.swarmmode --docker.watch --docker.domain=localhost --docker.exposedbydefault=false --logLevel=INFO
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/null:/traefik.toml
    networks:
      - public
      - internal
    deploy:
      replicas: 3
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  frontend:
    image: wacc-frontend:latest
    networks:
      - internal
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.backend=frontend"
        - "traefik.port=80"
        - "traefik.frontend.rule=Host:localhost"

  backend:
    image: wacc-backend:latest
    networks:
      - internal
    environment:
      APPLICATION_SECRET: "some-fake-secret-to-change"
      MONGODB_URI: "mongodb://mongo:27017/wacc"
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.backend=backend"
        - "traefik.port=9000"
        - "traefik.frontend.rule=PathPrefixStrip:/api"

  docker-socket-proxy:
    image: wacc-docker-socket-proxy:latest
    networks:
      - internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: global
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  mongo:
    image: mongo:3.4
    networks:
      - internal
    volumes:
      - mongo_data:/data/db
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=false"

  cassandra:
    image: cassandra:3.0
    networks:
      - internal
    volumes:
      - cassandra_data:/cassandra/data/db
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=false"

networks:
  public:
    driver: overlay
  internal:
    driver: overlay
    internal: true
  consul-net:
    external: true

volumes:
  mongo_data: {}
  cassandra_data: {}
