play {

  modules {

    # Deadbold -> authorization
    enabled += "be.objectify.deadbolt.scala.DeadboltModule"

    # ReactiveMongo -> connect to MongoDB
    enabled += "play.modules.reactivemongo.ReactiveMongoModule"

    # StartupModule -> initialize the databases
    enabled += "startup.StartupModule"
  }

  filters {

    # authentication -> disable CSRF since we use JWT tokens as Headers
    disabled += "play.filters.csrf.CSRFFilter"

    # allowed hosts
    hosts.allowed = ["localhost", "localhost:9000", "wacc4.tk"]
  }

  # application secret -> used to sign JWT tokens
  http.secret {
    key = "cb70ffc2-ff29-4067-ab69-e07eeefa3913"
    key = ${?APPLICATION_SECRET}
  }

  // make sure to have fast retries for HTTP requests
  ws.timeout {
    connection = 10 seconds
    timeout.idle = 10 seconds
  }
}

// we handle the retries explicitly using supervision on Akka Streams
akka.kafka.consumer {
  stop-timeout = 10s
  close-timeout = 5s
  commit-timeout = 5s
  wakeup-timeout = 2s
  max-wakeups = 20
  kafka-clients {
    enable.auto.commit = false
  }
}

kafka {
  url = "kafka://localhost:9092"
  url = ${?KAFKA_URL}
  topic = "docker.services"
  topic = ${?KAFKA_TOPIC}
}

mongodb {
  uri = "mongodb://localhost:27017/wacc"
  uri = ${?MONGODB_URI}
}

cassandra {
  hosts = "127.0.0.1"
  hosts = ${?CASSANDRA_HOSTS}
  port = 9042
  port = ${?CASSANDRA_PORT}
  keyspace = "wacc"
  keyspace = ${?CASSANDRA_KEYSPACE}
  replication = 1
  replication = ${?CASSANDRA_REPLICATION}
}

swarm {
  url = "http://localhost:2375"
  url = ${?SWARM_URL}
}
